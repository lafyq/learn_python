print("")

"""
在正则表达式中，如果直接给出字符，就是精确匹配。
1、用\d可以匹配一个数字，
2、\w可以匹配一个字母或数字
3、.可以匹配任意字符

要匹配变长的字符，在正则表达式中，
1、用*表示任意个字符（包括0个），
2、用+表示至少一个字符，
3、用?表示0个或1个字符，
4、用{n}表示n个字符，
5、用{n,m}表示n-m个字符： # {3, 10} 表示 3个-10个字符


进阶：
要做更精确地匹配，可以用[]表示范围，
1、[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
2、[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串；；
3、[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，
        后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
4、[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
5、A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
6、^表示行的开头，^\d表示必须以数字开头。
7、$表示行的结束，\d$表示必须以数字结束。
"""

"""
以上大概了解了 “正则表达式” 这个东东西西，那么下边就在Python中使用正则表达式
*****  Python提供re模块，包含所有正则表达式的功能  *****
"""

s = 'ABC\\-001'
print(s)  # ABC\-001

"""
由于Python的字符串本身也用\转义，所以要特别注意：
因此我们强烈建议使用 Python的r前缀，就不用考虑转义的问题了：
"""
s = r'ABC\-001'
print(s)  # ABC\-001


# 先看看如何判断正则表达式是否匹配：
import re
result = re.match(r'^\d{3}\-\d{3,8}$', '010-123456')
print(result)  # <_sre.SRE_Match object; span=(0, 10), match='010-123456'>
result = re.match(r'^\d{3}\-\d{3,8}$', '010d3456')
print(result)  # None

""" match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
常见的判断方法就是：

test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')

"""

# 用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：

print('a b   c'.split(' '))  # ['a', 'b', '', '', 'c']

""" 嗯，无法识别连续的空格，用正则表达式试试： """
print(re.split(r'\s+', 'a b   c'))  # ['a', 'b', 'c']

# 无论多少个空格都可以正常分割。加入,试试：
print(re.split(r'[\s\,]+', 'a,b, c  d'))  # ['a', 'b', 'c', 'd']

# 再加入;试试：
print(re.split(r'[\s\,\;]+', 'a,b;; c  d'))  # ['a', 'b', 'c', 'd']


"""
分组
除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。
用()表示的就是要提取的分组（Group）。比如：
^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：

"""
m = re.match(r'^(\d{3})-(\d{3,8}$)', '010-12345')
print(m.group(0))  # group(0)永远是原始字符串  010-12345
print(m.group(1))  # group(1) 第一组  010
print(m.group(2))  # 第二组  12345


"""  贪婪匹配
  正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
  举例如下，匹配出数字后面的0：
  """

print(re.match(r'^(\d+)(0*)$', '102300').groups())
# ('102300', '')
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，
# 加个?就可以让\d+采用非贪婪匹配
print(re.match(r'^(\d+?)(0*)$', '102300').groups())  # ('1023', '00')


"""
编译
当我们在Python中使用正则表达式时，re模块内部会干两件事情：

1、编译正则表达式，如果正则表达式的字符串本身不合法，会报错；

2、用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，
我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
"""
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print(re_telephone.match('010-12345').groups())

"""
匹配邮箱最终表达式：
 我们用@符号将邮箱的名称和域名拼接起来，因此完整的邮箱表达式为
  ^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$
"""